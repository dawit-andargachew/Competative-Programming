class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        p = [i for i in range(n)]

        def find(i):
            if i!=p[i]:
                p[i] = find(p[i])
            return p[i]

        for i in range(n):
            for j in range(i):
                if graph[i][j] == 1:
                    pi,pj = find(i),find(j)
                    if pi!=pj:
                        pi,pj = sorted([pi,pj])
                    p[pj] = pi
        freq = {}
        for i in range(n):
            pi = find(i)
            if pi not in freq:
                freq[pi] = 0
            freq[pi] += 1
        grpsz = 0
        res = min(initial)
        freqini = {}
        initial.sort() 
        #if not sorted here it won't necessarily give the one with the smallest index

        for ini in initial:
            pi = find(ini)
            if pi not in freqini:
                freqini[pi] = 0
            freqini[pi] += 1

        for ini in initial:
             pi = find(ini)
            #we have to exclude the points which won't affect M(i) as some other initial points belong to the same union
             if freqini[pi] == 1: 
                 if freq[pi] > grpsz:
                     grpsz = freq[pi]
                     res = ini
        return res 

        