class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        initials = set()

        for i in initial:
            initials.add(i)

        parent = [i for i in range(n)]
        size = [1] * n

        for i in range(n):
            for j in range(n):
                if(graph[i][j] == 1 and i not in initials and j not in initials and i != j):
                    self.union(i, j, parent, size)
        
        map = {}

        infected = [0] * n
        for i in initial:
            # this will create a map for all components vs the infected numbe rof nodes in that component apart from i
            map[i] = set()
            for j in range(n):
                if(graph[i][j] == 1 and i != j and j not in initials):
                    p = self.find(j, parent)
                    map[i].add(p)
            for c in map[i]:
                infected[c] += 1
        
        ans_node = -1
        ans_size = -1
        for i in initial:
            components = map[i]
            s = 0
            for p in components:
                if(infected[p] == 1):
                    s += size[p]
            
            if(s > ans_size):
                ans_size = s
                ans_node = i
            elif(s == ans_size):
                ans_node = min(i, ans_node)
        return ans_node


    def find(self, x, parent):
        if(parent[x] != x):
            parent[x] = self.find(parent[x], parent)
        return parent[x]
    
    def union(self, x, y, parent, size):
        root_x = self.find(x, parent)
        root_y = self.find(y, parent)

        if(root_x == root_y):
            return
        
        if(size[root_x] <= size[root_y]):
            parent[root_x] = root_y
            size[root_y] += size[root_x]
        else:
            parent[root_y] = root_x
            size[root_x] += size[root_y]
